name: Continuous Integration

on:
  pull_request:
    branches: [main, develop]
    paths:
      - '**.tf'
      - '**.py'
      - '**.go'
      - 'modules/**'
      - 'environments/**'
      - '.github/workflows/**'
  push:
    branches: [develop]

env:
  TF_VERSION: "1.5.0"
  GO_VERSION: "1.21"
  PYTHON_VERSION: "3.10"

jobs:
  validate:
    name: Terraform Validate & Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, test, prd]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Init - ${{ matrix.environment }}
        run: |
          cd environments/${{ matrix.environment }}
          terraform init -backend=false

      - name: Terraform Validate - ${{ matrix.environment }}
        run: |
          cd environments/${{ matrix.environment }}
          terraform validate

      - name: TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: Run TFLint
        run: |
          tflint --init
          tflint --recursive

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkov Terraform Security Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform
          output_format: sarif
          output_file_path: checkov.sarif
          
      - name: Upload Checkov results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov.sarif

      - name: TFSec Security Scanner
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: .
          github_token: ${{ github.token }}

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run Go Unit Tests
        run: |
          cd terratest
          go mod download
          go test -v -run TestTerraformValidation
          go test -v -run TestHelloWorldFunctionUnit

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Test Python Cloud Function
        run: |
          cd modules/cloud_function
          python -m pytest -v --tb=short || echo "No Python tests found"

  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        environment: [dev, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure GCP Credentials
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Terraform Init - ${{ matrix.environment }}
        run: |
          cd environments/${{ matrix.environment }}
          terraform init

      - name: Terraform Plan - ${{ matrix.environment }}
        id: plan
        run: |
          cd environments/${{ matrix.environment }}
          terraform plan -var="project_id=${{ secrets.GCP_PROJECT_ID }}" -no-color -out=tfplan
        continue-on-error: true

      - name: Comment PR with Plan
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan - ${{ matrix.environment }} ðŸ“–
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  cost-estimation:
    name: Cost Estimation
    runs-on: ubuntu-latest
    needs: [plan]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Generate Infracost diff
        run: |
          infracost diff --path=environments/dev \
            --format=comment \
            --github-token=${{ secrets.GITHUB_TOKEN }} \
            --pull-request=${{ github.event.pull_request.number }} \
            --repo=${{ github.repository }} \
            --behavior=update 