name: Deploy to Test

on:
  workflow_dispatch:
    inputs:
      confirm_deployment:
        description: 'Type "deploy" to confirm deployment to TEST environment'
        required: true
        default: ''

env:
  TF_VERSION: "1.5.0"
  ENVIRONMENT: "test"

jobs:
  validate-input:
    name: Validate Deployment Request
    runs-on: ubuntu-latest
    steps:
      - name: Validate confirmation input
        run: |
          if [ "${{ github.event.inputs.confirm_deployment }}" != "deploy" ]; then
            echo "❌ Deployment cancelled. You must type 'deploy' to confirm."
            exit 1
          fi
          echo "✅ Deployment confirmed for TEST environment"

  deploy:
    name: Deploy to Test Environment
    runs-on: ubuntu-latest
    needs: [validate-input]
    # Note: Remove environment reference until GitHub environments are configured
    environment: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure GCP Credentials
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_TEST }}

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: Enable GCP APIs
        run: |
          ./scripts/enable_apis.sh ${{ secrets.GCP_PROJECT_ID_TEST }}

      - name: Terraform Init - Test
        run: |
          cd environments/test
          terraform init

      - name: Terraform Plan - Test
        id: plan
        run: |
          cd environments/test
          terraform plan -var="project_id=${{ secrets.GCP_PROJECT_ID_TEST }}" -out=tfplan

      - name: Terraform Apply - Test
        run: |
          cd environments/test
          terraform apply tfplan

      - name: Get Deployment Outputs
        id: outputs
        run: |
          cd environments/test
          echo "function_url=$(terraform output -raw function_url)" >> $GITHUB_OUTPUT
          echo "load_balancer_url=$(terraform output -raw load_balancer_url)" >> $GITHUB_OUTPUT

      - name: Test Deployment
        run: |
          echo "Testing Cloud Function..."
          curl -f ${{ steps.outputs.outputs.function_url }} || exit 1
          
          echo "Testing Load Balancer..."
          for i in {1..20}; do
            if curl -f ${{ steps.outputs.outputs.load_balancer_url }} 2>/dev/null; then
              echo "Load balancer is ready!"
              break
            fi
            echo "Waiting for load balancer... ($i/20)"
            sleep 30
          done

      - name: Create deployment summary
        run: |
          echo "## 🧪 Test Environment Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Test" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Endpoints" >> $GITHUB_STEP_SUMMARY
          echo "- **Cloud Function:** ${{ steps.outputs.outputs.function_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Load Balancer:** ${{ steps.outputs.outputs.load_balancer_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Validation Tests" >> $GITHUB_STEP_SUMMARY
          echo "- Cloud Function endpoint: ✅ Responsive" >> $GITHUB_STEP_SUMMARY
          echo "- Load Balancer endpoint: ✅ Responsive" >> $GITHUB_STEP_SUMMARY

  smoke-tests:
    name: Run Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Configure GCP Credentials
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_TEST }}

      - name: Run Smoke Tests
        env:
          GOOGLE_PROJECT: ${{ secrets.GCP_PROJECT_ID_TEST }}
        run: |
          cd terratest
          go mod download
          echo "Running smoke tests for TEST environment..."
          go test -v -run TestTerraformValidation -timeout 10m 