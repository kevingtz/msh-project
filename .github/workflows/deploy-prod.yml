name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag to deploy (e.g., v1.0.0)'
        required: true
        type: string
      confirm_production:
        description: 'Type "PRODUCTION" to confirm production deployment'
        required: true
        default: ''

env:
  TF_VERSION: "1.5.0"
  ENVIRONMENT: "prd"

jobs:
  validate-production-deployment:
    name: Validate Production Deployment
    runs-on: ubuntu-latest
    steps:
      - name: Validate inputs
        run: |
          if [ "${{ github.event.inputs.confirm_production }}" != "PRODUCTION" ]; then
            echo "❌ Production deployment cancelled. You must type 'PRODUCTION' to confirm."
            exit 1
          fi
          
          if [ -z "${{ github.event.inputs.version_tag }}" ]; then
            echo "❌ Version tag is required for production deployment."
            exit 1
          fi
          
          echo "✅ Production deployment validated"
          echo "Version: ${{ github.event.inputs.version_tag }}"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version_tag }}

      - name: Verify tag exists
        run: |
          if ! git tag --list | grep -q "^${{ github.event.inputs.version_tag }}$"; then
            echo "❌ Tag ${{ github.event.inputs.version_tag }} does not exist"
            exit 1
          fi
          echo "✅ Tag ${{ github.event.inputs.version_tag }} verified"

  security-scan-prod:
    name: Production Security Scan
    runs-on: ubuntu-latest
    needs: [validate-production-deployment]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version_tag }}

      - name: Run Checkov Security Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform
          soft_fail: false
          
      - name: Run TFSec Security Scan
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: .
          github_token: ${{ github.token }}
          soft_fail: false

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate-production-deployment, security-scan-prod]
    # Note: Remove environment reference until GitHub environments are configured
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version_tag }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure GCP Credentials
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_PROD }}

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: Enable GCP APIs
        run: |
          ./scripts/enable_apis.sh ${{ secrets.GCP_PROJECT_ID_PROD }}

      - name: Terraform Init - Production
        run: |
          cd environments/prd
          terraform init

      - name: Terraform Plan - Production
        id: plan
        run: |
          cd environments/prd
          terraform plan -var="project_id=${{ secrets.GCP_PROJECT_ID_PROD }}" -out=tfplan

      - name: Manual Approval for Production
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ secrets.PROD_APPROVERS }}
          minimum-approvals: 2
          issue-title: "🚀 Production Deployment Approval Required"
          issue-body: |
            ## Production Deployment Request
            
            **Version:** ${{ github.event.inputs.version_tag }}
            **Requester:** ${{ github.actor }}
            **Environment:** Production
            
            ### Deployment Details
            - **Commit:** ${{ github.sha }}
            - **Timestamp:** ${{ github.event.created_at }}
            
            ### Pre-deployment Checklist
            - [ ] Security scans passed
            - [ ] All tests are green
            - [ ] Change management approval obtained
            - [ ] Rollback plan is ready
            
            **Please review the deployment plan and approve if ready to proceed.**

      - name: Terraform Apply - Production
        run: |
          cd environments/prd
          terraform apply tfplan

      - name: Get Deployment Outputs
        id: outputs
        run: |
          cd environments/prd
          echo "function_url=$(terraform output -raw function_url)" >> $GITHUB_OUTPUT
          echo "load_balancer_url=$(terraform output -raw load_balancer_url)" >> $GITHUB_OUTPUT

      - name: Production Health Check
        run: |
          echo "🔍 Running production health checks..."
          
          # Test Cloud Function
          echo "Testing Cloud Function..."
          if ! curl -f ${{ steps.outputs.outputs.function_url }}; then
            echo "❌ Cloud Function health check failed"
            exit 1
          fi
          
          # Test Load Balancer with retries
          echo "Testing Load Balancer..."
          for i in {1..30}; do
            if curl -f ${{ steps.outputs.outputs.load_balancer_url }} 2>/dev/null; then
              echo "✅ Load balancer is healthy!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ Load balancer health check failed after 15 minutes"
              exit 1
            fi
            echo "Waiting for load balancer... ($i/30)"
            sleep 30
          done

      - name: Create Production Deployment Summary
        run: |
          echo "## 🚀 Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ github.event.inputs.version_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Production" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment time:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Production Endpoints" >> $GITHUB_STEP_SUMMARY
          echo "- **Cloud Function:** ${{ steps.outputs.outputs.function_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Load Balancer:** ${{ steps.outputs.outputs.load_balancer_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Health Checks" >> $GITHUB_STEP_SUMMARY
          echo "- Cloud Function: ✅ Healthy" >> $GITHUB_STEP_SUMMARY
          echo "- Load Balancer: ✅ Healthy" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scans: ✅ Passed" >> $GITHUB_STEP_SUMMARY

  post-deployment-tests:
    name: Post-deployment Tests
    runs-on: ubuntu-latest
    needs: [deploy-production]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version_tag }}

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Configure GCP Credentials
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_PROD }}

      - name: Run Production Tests
        env:
          GOOGLE_PROJECT: ${{ secrets.GCP_PROJECT_ID_PROD }}
        run: |
          cd terratest
          go mod download
          echo "Running post-deployment tests..."
          go test -v -run TestTerraformValidation -timeout 10m

      - name: Notify deployment success
        uses: actions/github-script@v6
        with:
          script: |
            const message = `🎉 **Production Deployment Successful!**
            
            **Version:** ${{ github.event.inputs.version_tag }}
            **Environment:** Production
            **Deployed by:** ${{ github.actor }}
            **Deployment completed at:** ${new Date().toISOString()}
            
            All health checks and post-deployment tests have passed.`;
            
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: message
            }); 